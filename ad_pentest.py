import subprocess

class Tool:
    def __init__(self, name):
        self.name = name
        self.options = []

    def add_option(self, name, description, command, example):
        self.options.append({'name': name, 'description': description, 'command': command, 'example': example})

    def display_options(self):
        print(f"Options for {self.name}:")
        for i, option in enumerate(self.options, start=1):
            print(f"{i}) {option['description']}")

    def handle_options(self, option):
        try:
            option = int(option)
            selected_option = self.options[option - 1]
            return f"{selected_option['name']}\nDescription: {selected_option['description']}\nUsage: {selected_option['command']}\nExample: {selected_option['example']}"
        except (ValueError, IndexError):
            return "Invalid option"

#CrackMapExec
crackmapexec = Tool("CrackMapExec")
crackmapexec.add_option("Enumerate Shares", "Enumerate SMB shares", "crackmapexec smb <ip> -u '' -p '' --shares", "crackmapexec smb 172.16.5.7 -u '' -p '' --shares")
crackmapexec.add_option("Enumerate Users", "Enumerate users on the target using SMB", "crackmapexec smb <ip> -u '' -p '' --users", "crackmapexec smb 172.16.5.7 -u '' -p '' --users")
crackmapexec.add_option("Enumerate Groups", "Enumerate groups on the target using SMB", "crackmapexec smb <ip> -u '' -p '' --groups", "crackmapexec smb 172.16.5.7 -u '' -p '' --groups")
crackmapexec.add_option("Enumerate Password Policy", "Enumerate the password policy for the target", "crackmapexec smb <ip> -u '' -p '' --pass-pol", "crackmapexec smb 172.16.5.7 -u '' -p '' --pass-pol")

# need to fix this later so that options will work
def run_command(command):
    print("\n-----------Running command-----------")
    subprocess.run(command, shell=True)

# Displays a list of ad tools in numerical order
def ad_help_list():
    tools = [crackmapexec]

    print("Select a tool:")
    for i, tool in enumerate(tools, start=1):
        print(f"{i}) {tool.name}")

    tool_choice = input("\nEnter the number of the tool (q to quit): ")

    if tool_choice == "q":
        exit()

    try:
        tool_choice = int(tool_choice)
        selected_tool = tools[tool_choice - 1]

        selected_tool.display_options()
        option = input("\nEnter the number of the option (q to quit): ")

        if option == "q":
            exit()

        print(selected_tool.handle_options(option))
    except (ValueError, IndexError):
        return "Invalid option"

if __name__ == "__main__":

    command = ad_help_list()

    if command != "Invalid option":
        command = command.split("\n")[2].split(": ")[1]

        print(command)
        '''
        inp = input("Do you want to run the command selected? (Y/y)")
        if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
            run_command(chosen_command)
        '''